== GSCV Web App

This is the repository for the temporary Sinatra web app version of Greg Borenstein's _Getting Started with Computer Vision_.

== Deploying to Heroku

Before deploying, merge in any new changes from the origin repo:

[source,bash]
----
$ git fetch upstream
$ git checkout master
$ git merge upstream/master
----

Then on the command line, run the prep script and add/commit the changes to this repo:

[source,bash]
----
$ ./prep_to_deploy
$ git commit -am 'deploying latest version'
$ git push origin master
----

Then push to heroku:

[source,bash]
----
$ git push heroku master
----

This should be all you need to do.

== Running locally

To run the app locally, make sure you have shotgun installed. You'll want to merge in changes from the source repo and run the prep script. Then simply run:

[source,bash]
----
$ bundle install
$ shotgun
----

The app will now be running at http://localhost:9393/.

== Widgets

Widgets should be written inline with your chapter text, in standard markdown syntax. Widgets may be placed anywhere in a chapter file, as long as they are wrapped in `<!--START WIDGET-->` and `<!--END WIDGET-->` comment tags (n.b. these _are_ case sensitive and must be spelled exactly).

Widgets are split into 3 columns. Columns need to be divided manually via `<!--COLBREAK-->` comment tags. Slides also need to be divided manually via `<!--SLIDE BREAK-->` comment tags. Here's a sample widget with 2 slides:

[source,html]
----
<!--START WIDGET-->

<a href="http://www.flickr.com/photos/unavoidablegrain/9225754686/" title="image1 by atduskgreg, on Flickr"><img src="http://farm4.staticflickr.com/3760/9225754686_8cb205c73d.jpg" width="500" height="358" alt="image1"></a>

<!--COLBREAK-->

	[import gab.opencvpro.*;](#v1c1){id=v1l1}

	OpenCV opencv;

	void setup() {
	[opencv = new OpenCV(this, "flashlight.jpg");](#v1c2){id=v1l2} 
	  size(opencv.width, opencv.height, P2D);
	}

	void draw() {
	  image(opencv.getOutput(), 0, 0); 
	}

<!--COLBREAK-->

* [We start with a still image as a test.](#v1l1){id=v1c1}
* [This is OpenCV hello world: load the image in, and display it.](#v1l2){id=v1c2}
* Note that OpenCV for Processing converts the image to grayscale by default.

<!--SLIDEBREAK-->

<a href="http://www.flickr.com/photos/unavoidablegrain/9225754450/" title="image2 by atduskgreg, on Flickr"><img src="http://farm6.staticflickr.com/5491/9225754450_a8780f2c74.jpg" width="500" height="358" alt="image2"></a>

<!--COLBREAK-->

	import gab.opencvpro.*;

	OpenCV opencv;

	void setup() {
	  opencv = new OpenCV(this, "flashlight.jpg");  
	  size(opencv.width, opencv.height, P2D);
	}

	void draw() {
	  image(opencv.getOutput(), 0, 0); 
	  [PVector brightestPoint = opencv.max();](#v2c1){id=v2l1}
			  
	  noStroke();
	  fill(255, 0, 0);
	  [ellipse(brightestPoint.x, brightestPoint.y, 20, 20);](#v2c2){id=v2l2}
	}

<!--COLBREAK-->

* [Call <code>opencv.max()</code> to find the location of the brightest point in the image.](#v2l1){id=v2c1}
* [We then display that x-y location with a red ellipse.](#v2l2){id=v2c2}

<!--END WIDGET-->
----

=== Code callouts

I've added some custom handling for code callouts within widgets. You can tag your code and the corresponding comments so that they highlight eachother on click, like this:

image::https://raw.github.com/oreillymedia/opencv-processing-book/master/site/images/callouts.png[]

To do so, use the following markup:

In code: `[ellipse(brightestPoint.x, brightestPoint.y, 20, 20);](#v2c2){id=v2l2}`

And in the corresponding comment: `* [We then display that x-y location with a red ellipse.](#v2l2){id=v2c2}`

This adds `id`s to the elements, and then links them to eachother. Thus, the above would be converted to the following:

Code: `<a href="#v2c2" class="callout" id="v2l2">ellipse(brightestPoint.x, brightestPoint.y, 20, 20);</a>`

Comment: `<li><a class="callout" id="v2c1" href="#v2l1">Call <code>opencv.max()</code> to find the location of the brightest point in the image.</a></li>`

You can see this in action in the widget sample above.

== Quizzes

You can include interactive quizzes by placing HTML markup inline in your markdown files. We use Bootstrap popups to reveal the answer. Here are two examples of how you could structure this:

[source,html]
----
Q: What qualities of our input image could cause problems with brightness tracking: A) The presence of many glowing objects. B) Moving shadows cast by passersby. C) The auto-exposure on our camera triggering. D) All of the above.

<p class="pop btn bottom" href="#" rel="popover" title="Answer"
data-content="D, all of the above.">Reveal Answer</p>
----

Which will look like this:

image::https://raw.github.com/oreillymedia/opencv-processing-book/master/site/images/quiz1.png[]

[source,html]
----
Q: What qualities of our input image could cause problems with brightness tracking:

<span class="pop btn left" href="#" rel="popover" 
data-content="Wrong!">A</span> The presence of many glowing objects.

<span class="pop btn left" href="#" rel="popover" 
data-content="Wrong!">B</span> Moving shadows cast by passersby.

<span class="pop btn left" href="#" rel="popover" 
data-content="Wrong!">C</span> The auto-exposure on our camera triggering.

<span class="pop btn left" href="#" rel="popover" 
data-content="Correct!">D</span> All of the above.
----

Which will look like this:

image::https://raw.github.com/oreillymedia/opencv-processing-book/master/site/images/quiz2.png[]
